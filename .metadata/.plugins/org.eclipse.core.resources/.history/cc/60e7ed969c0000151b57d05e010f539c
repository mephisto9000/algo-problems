import java.io.BufferedReader;

import java.io.File;

import java.io.FileReader;

import java.io.IOException;

import java.io.InputStreamReader;

import java.util.Arrays;

import java.util.Comparator;

import java.util.HashSet;

import java.util.LinkedList;

import java.util.List;

import java.util.PriorityQueue;

import java.util.StringTokenizer;



public class Solution {



private int n;

private int k;



private int[][] prices;


private int[][] tprices;


private int[][] memo;


public class Card{

public  int ii;

public int jj ;

public int price;


public Card(int ii, int jj, int price)

{

super();

this.ii = ii;

this.jj = jj;

this.price = price;

}

}


Comparator<Card> comp = new Comparator<Card>()

{

@Override

public int compare(Card o1, Card o2) {


if (o1.price > o2.price)

return 1;


if (o1.price < o2.price)

return -1;


return 0;

}


};





public Solution(int n, int k)

{

super();

this.n = n;

this.k = k;

}



public void setPrices(int[][] prices)

{

this.prices = prices;

}



public int calc()

{

tprices = new int[n][k];

memo = new int[n][k];



// transpose

for (int i = 0; i < k; i++)

{

for (int j = 0; j < n; j++)

{

tprices[j][i] = prices[i][j];

memo[j][i] = -1;

}

}



/*

int prev = -1;

int val = 0;


HashSet hs = new HashSet();


for (int i = 0; i < n; i++)

{

//Arrays.sort(a[i]);


PriorityQueue<Card> q = new PriorityQueue<Card>(k, comp);

for (int j = 0; j < k; j++)

q.add(new Card(i,j, a[i][j]));


//Object[] arr =  q.toArray();


for (int j = 0; j < k; j++)

{



Card c =   q.poll(); //arr[j];

//q.


System.out.println("i = "+c.ii+" j = "+c.jj+" price = "+c.price);


if (!hs.contains(c.jj) || prev == c.jj)

{


//System.out.println("i="+c.ii+" j="+c.jj+", price="+c.price);

val += c.price;

//prev = c.jj;

hs.add(c.jj);

prev = c.jj;

break;

}

}

}


*/





return rec (new HashSet<Integer>(), 0, -1);

 

 

/*int min = Integer.MAX_VALUE;

for (int i = 0; i < k; i++)

{

 

//System.out.println(memo[0][i]);

 

if (memo[0][i] < min)

min = memo[0][i];

 

 

 

}

 

return min; */





}


public int rec(HashSet<Integer> h, int cur_i,  int prev)

{

if (cur_i >= n )

return 0;



PriorityQueue<Card> q = new PriorityQueue<Card>(k, comp);

for (int j = 0; j < k; j++)

q.add(new Card(cur_i,j, tprices[cur_i][j]));



int currentSumm = Integer.MAX_VALUE;


//List<Integer> ans = new LinkedList<Integer>();

int minAns = Integer.MAX_VALUE;


for (int j = 0; j < k; j++)

{

Card c =   q.poll(); //arr[j];



//System.out.println("i = "+c.ii+" j = "+c.jj+" price = "+c.price);


if ((!h.contains(c.jj) || prev == c.jj )) // && currentSumm >= c.price)

{


//System.out.println("i="+c.ii+" j="+c.jj+", price="+c.price);

//cur_i += c.price;

//prev = c.jj;

h.add(c.jj);

int loc_prev = c.jj;


currentSumm = c.price;

//if (minAns < )

int ans;





if (cur_i +1 < n)

{

if (memo[cur_i+1][loc_prev] == -1)

{

int m = rec(h, cur_i +1, loc_prev);

ans = currentSumm + m; //rec(h, cur_i +1, loc_prev);

memo[cur_i+1][loc_prev] =m;

}

else 

ans = currentSumm + memo[cur_i+1][loc_prev];


}

else 

ans = currentSumm;



if (minAns > ans)

minAns = ans;


if (prev != c.jj)

h.remove(c.jj);


//minAnd.add (currentSumm + rec(h, cur_i +1, prev));


//break;

}

}


return minAns;

}



public static void main(String[] args) throws IOException 

{

//BufferedReader sb = new BufferedReader(new InputStreamReader(System.in));

BufferedReader sb = new BufferedReader(new FileReader(new File("case2.txt")));



String s = sb.readLine();



StringTokenizer st = new StringTokenizer(s);


int n = Integer.parseInt(st.nextToken());

int k = Integer.parseInt(st.nextToken());


Solution sol = new Solution(n, k);



int [][] prices = new int[k][n];



for (int i = 0; i < k ; i++)

{

s = sb.readLine();

st = new StringTokenizer(s);



for (int j = 0; j <  n; j++)

prices[i][j] = Integer.parseInt(st.nextToken());



}





sol.setPrices(prices);



System.out.println(sol.calc());





}

}